
Guia de unidades de medidas no CSS: quando Usar Cada Uma

1. px (pixels)

Uso recomendado:

Para tamanhos fixos e precisos que não devem variar com o tamanho da tela ou do texto.
Ideal para BORDAS, MARGENS e tamanho de elementos que precisam MANTER uma aparencia CONSISTENTE

quando evitar:

quando você deseja que o design seja mais flexiveis e adaptável a diferentes tamanhos de tela 
e configurações de acessibilidade.

Exemplo de uso:

html
<div class="box"

</div>

css

.box{
    width: 300px; /*Largura fixa*/
    height: 200px; /*Altura fixa*/
    background-color: red;
}

2. em (Relative to Parent Font Size)

Uso  recomendado:

Quando você deseja que o tamanho de  um elemento seja Relativo ao tamanho da fonte de seu elemento pai.
Ideal para criar layouts e tipografia que se adaptam ao tamanho do texto do pai.

Quando evitar:

Se você precisa de consitência em relação ao tamanho da fonte em toda a aplicação, independente da hierarquia de elementos.

Exemplo de Uso:

html
<div class="container">

        <div class="child">

        </div>

</div>

css
.container {
   font-size: 16px; /*tamanho base - pai*/
}

.child {
     font-size: 1.5rem; /*1.5 vezes o tamanho da fonte do pai (24px)*/
}

--------------------------------------------------------------------------------------

3. rem (Relative to Root Font Size)

Uso recomendado:

Para criar tamanhos de fonte e espaçamentos consistentes em toda a aplicação, baseando-se no tamanho da fonte raiz(html)

Ideal para layouts e tipografia que precisam ser consistentes independentemente do tamanho da fonte dos elementos pais.

Quando evitar:

Quando você quer um tamanho que seja Relativo apenas ao elemento pai específico e não à raiz. 

Exemplo de Uso:

html

<div class="container">

        <div class="text">
              <p> Lorem </p>
        </div>

 </div>    

 css

 html {
    font-size: 16px; /*Tamanho base da fonte*/
 }   

 .text {
    font-size: 2rem; /*32px (2 * 16px)*/
 }

 -------------------------------------------------------------------------------------

 4. vh (viewport height)

 Uso recomendado:

 Para definir tamanhos de altura Relativos à altura da viewport, como para criar seções de tela cheia ou elementos que devem ocupar uma porcentagem da altura da tela.

 Ideal para layouts que devem se ajustar à altura da tela do usuário.

 Quando evitar:

 Para elementos que não precisam ser sensíveis ao tamanho da viewport e devem ter tamanhos fixos ou proporcionais ao conteúdo

 Exemplo de Uso: 

 html
 <section class="fullscreen-section">
             <p> lorem</p>
 </section>
 testar em tamanhos de telas diferentes.

 css

 .fullscreen-section {
    height: 100vh; /*100% da altura da viewport*/
    width: 50vw;
    background-color: black;
 }            

 -------------------------------------------------------------------------------------

 5. vw (viewport width)

 Uso recomendado:

 Para definir tamanhos de largura relativo à largura da viewport, útil para criar layouts responsivos ou elementos que devem ajustar a largura da tela.

 Ideal para elementos que precisam ocupar uma porcentagem da largura da tela do usuário.

 Quando evitar:

 Para elementos cuja a largura não deve depender da largura da viewport e deve ser fixa ou proporcional ao conteúdo.

 Exemplo de Uso:

 html
 <section class="responsive-element">
               <p> lorem</p>
 </section>

 css

 .responsive-element {
    width: 50vw; /*50% da largura da viewport*/
    height: 50vh; 
    background-color: yellow;

 }              

--------------------------------------------------------------------------------------

6. % (Percentual)

Uso recomendado:

Para definir tamanhos relativos ao tamanho do elemento pai, ideal para layouts flexiveis e adatáveis.
Útil para definir larguras e alturas de elementos dentro de containers com tamanhos variaveis.

Quando evitar:

Quando o tamanho não deve depender do elemento pai, especialmente se o elemento pai não tiver um tamanho fixo ou previsível.

Exemplo de Uso:

html 
<div class="parent">
        <div class="child">
        </div>
</div>

css
.parent {
    width: 500px; /*Largura fixa do pai*/
    background-color: green;
}

.child {
    width: 50%; /*50% da largura do elemento pai (250px)*/
    background-color: pink;
}

